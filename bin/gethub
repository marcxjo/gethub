#!/bin/sh

#
# gethub - conveniently clone/update repos in a directory tree
#

UNAME_BIN=$(which uname)

_SRC_ROOT_UNIX=${HOME}/.local/src
# TODO - is this a decent choice for Mac OS?
_SRC_ROOT_MACOS=${HOME}/Library/Repos
# Assume Unix path syntax since we're already assuming a Unix shell
# (I.e., as opposed to sourcing ${USERPROFILE}, which uses Windows syntax)
# TODO - is HOME set in all major Bash-based envs in Windows?
_SRC_ROOT_WIN=${HOME}/source

get_src_root() {
  _kernel_name=$(uname -s)

  case $_kernel_name in
    # TODO - confirm that these options aren't total bullshit
    Linux|BSD)
      echo ${_SRC_ROOT_UNIX}
      ;;
    Darwin)
      echo ${_SRC_ROOT_MACOS}
      ;;
    *_NT-*) # Works for MSYS2 and Git Bash
            # TODO - need to investigate other Bash-based Windows envs
      echo ${_SRC_ROOT_WIN}
      ;;
    *)      # Don't leave out illumos et al.
      echo ${_SRC_ROOT_UNIX}
      ;;
  esac
}

_SRC_ROOT=$(get_src_root)
GIT_BIN=$(which git)
REPO_CONFIG_DIR=${REPO_CONFIG_DIR:-${HOME}/.config/gethub}

# If test mode is specified, then don't clone or update
# Just print the text output to demonstrate the resulting behavior
TEST_MODE=""

make_repo_subtree() {
  local _segments=${@}
  echo ${_segments} | sed 's| |\/|g'
}

# Environment overrides ########################################################

# The directory structure overrides are provided for convenience, but if you
# find yourself using them often, you may as well set new defaults
while getopts :c:g:p:r:t o; do
  case "$o" in
    c) # Custom repo config
      . ${REPO_CONFIG_DIR}/${OPTARG}.conf
      ;;
    g) # Custom Git provider
      GIT_PROVIDER_URL="${OPTARG}/"
      ;;
    p) # Set (or override) repo prefix
      REPO_PREFIX=${OPTARG}

      ;;
    r) # Override root source dir
      SRC_ROOT=${OPTARG}

      ;;
    t) # Test mode - prints all messages without running any file I/O executions
      TEST_MODE="1"
      echo "Running in test mode - no syncing will occur"

      ;;
    *)
      # Don't shift away the current option - it is most likely an input for the
      # next loop
      _LOOP_1_OFFSET=2
      break
      ;;
  esac
done

LOOP_1_OFFSET=${_LOOP_1_OFFSET:-1}
shift $(( ${OPTIND} - ${LOOP_1_OFFSET} ))

SRC_ROOT=${SRC_ROOT:-${_SRC_ROOT}}

# Default provider configs #####################################################

case "$1" in
  -a|--arch|--abs) # Arch Linux
    GIT_PROVIDER_URL="https://git.archlinux.org/"
    _REPO_PREFIX=arch

    shift 1
    ;;
  -b|--bitbucket) # Atlassian Bitbucket
    GIT_PROVIDER_URL="bitbucket:"
    _REPO_PREFIX=bitbucket

    shift 1
    ;;
  -g|--github) # Idk, some no-name up-and-comer...
    GIT_PROVIDER_URL="github:"
    _REPO_PREFIX=github

    shift 1
    ;;
  -u|--aur) # Arch Linux User Repository
    GIT_PROVIDER_URL="https://aur.archlinux.org/"
    _REPO_PREFIX=aur

    shift 1
    ;;
  -z|--ado) # Azure DevOps
    # TODO - IIRC arg ${2} in this string is just a hard-coded sub-path "_git",
    # but need to verify
    GIT_PROVIDER_URL="azure-devops:v3/$2/"
    _REPO_PREFIX="dev.azure.com"

    shift 2
    ;;
esac

REPO_PREFIX=${REPO_PREFIX:-${_REPO_PREFIX}}
REPO_SUBTREE=$(make_repo_subtree ${@})
GIT_REPO="${GIT_PROVIDER_URL}${REPO_SUBTREE}.git"

if [[ "${REPO_PREFIX:-x}" == "x" ]]
then
  echo "Error: repo prefix not set."
  echo "Must select a predefined repository or specify one via the -r switch."
  exit 2
fi

REPO_DIR=${SRC_ROOT}/${REPO_PREFIX}/${REPO_SUBTREE}

if [[ ! -d ${SRC_ROOT} && ${TEST_MODE:-x} == "x" ]]
then
  echo "Creating root source directory at ${REPO_DIR}..."
  mkdir -p ${SRC_ROOT}
fi

if [[ -d ${REPO_DIR} ]]; then
  echo "Repo directory ${REPO_DIR} already exists on local machine."
  echo "Updating local copy of repository ${GIT_REPO}..."

  # TODO - these nested conditionals can be handled in a function with some
  # finessing of the Git command input
  if [[ ${TEST_MODE:-x} == "x" ]]
  then
    pushd ${REPO_DIR} >/dev/null
    ${GIT_BIN} pull
    popd >/dev/null
  fi
else
  echo "Repo directory ${REPO_DIR} does not exist on local machine."
  echo "Cloning repository ${GIT_REPO}..."

  if [[ ${TEST_MODE:-x} == "x" ]]
  then
    ${GIT_BIN} clone ${GIT_REPO} ${REPO_DIR}
  fi
fi

exit 0

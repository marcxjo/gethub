#!/bin/sh

#
# gethub - conveniently clone/update repos in a directory tree
#

UNAME_BIN=$(which uname)

_SRC_ROOT_UNIX=${HOME}/.local/src
# TODO - is this a decent choice for Mac OS?
_SRC_ROOT_MACOS=${HOME}/Library/Repos
# Assume Unix path syntax since we're already assuming a Unix shell
# (I.e., as opposed to sourcing ${USERPROFILE}, which uses Windows syntax)
# TODO - is HOME set in all major Bash-based envs in Windows?
_SRC_ROOT_WIN=${HOME}/source

usage() {
  cat <<EOF

  ${0##*/} - A Convenient Git Repository Syncing Tool

  Usage:
    ${0##*/} [ CONFIG_OPTIONS | SYNC_DEFAULTS ] REPO_SUBTREE_SEGMENTS


  CONFIG_OPTIONS

  -c REPO_CONFIG_NAME
    Use an alternate repo .conf file to configure the repo sync settings. In
    the current implementation, .conf files are particularly simple and contain
    only two variables: GIT_PROVIDER_URL (explained below in the section for the
    respective command-line option) and REPO_PREFIX.

    .conf files are assumed to live in the repo config directory (which can be
    overridden by passing the variable REPO_CONFIG_DIR into the script).

    This option assumes that the file suffix is not passed as part of the
    argument. When using the default config directory for Linux, passing
    \`-c foo\` sources \${HOME}/.config/gethub/foo.conf.

  -g GIT_PROVIDER_URL
    Configure the Git provider URL if not sourcing a repo config.
    (It's probably just easier to create a repo config file, but this option is
    included for convenience/testing/accommodating your masochism).

  -p REPO_PREFIX
    Set an alternate prefix directory for the repo to be synced. By default, the
    repo prefix is the directory is the directory into which all repos for a
    specific Git provider are grouped. (E.g., the default prefix for GitHub
    repos, is \`github\`).

    This is useful in case you have a use case that, for whatever reason,
    necessitates having access to an alternate copy of a Git repo.
    Passing \`-r github-2\` will create the repo tree under \${SRC_ROOT}/github-2.

  -r SRC_ROOT
    Set an alternate source root directory for the repo to be synced. The source
    root is the top several segments of the path under which all repos synced
    with \`${0##*/}\`, are synced. The default varies by OS, but as an example,
    the source root defaults to ${HOME}/.local/src on Linux.

    This is available in case you're running \`${0##*/}\` in an environment
    where you don't have permission to change the default source root, or your
    OS is incorrectly detected (e.g., because you're running an obscure Unix or
    don't have \`uname\` installed).

  -t
    Run \`${0##*/}\` in test mode. In this mode, all messages logged in the
    default run mode are shown for debugging purposes, but no syncing occurs.


  SYNC_DEFAULTS

    \`${0##*/}\` ships with a few major Git providers preconfigured. When
    passing these options, the only other required parameters are the URL path
    segments not included in the root provider URL (see REPO_SUBTREE_SEGMENTS).

    Passing a sync default also sets a default repo prefix.

    As noted below, some sync defaults assume a configured SSH key. In an
    upcoming version, the script will be updated to fall back to HTTPS when a
    matching SSH key is not configured.

    -a|--arch|--abs
      Assumes an Arch Linx official svntogit PKGBUILD directory will be synced
      via Git. The default repo prefix is \`arch\`.

      NOTE: This option is very likely broken at the moment, as Arch Linux has
      recently migrated all build scripts to GitHub. Use Arch's \`asp\` package
      as a workaround for the meantime if this option fails for you. (Using
      \`-g\` will probably not work, given the architecture of the svntogit
      repo.)

    -b|--bitbucket
      Assumes a Bitbucket repo will be synced. The default repo prefix is
      \`bitbucket\`.

      Also assumes that the user has an SSH configured with a host setting named
      \`bitbucket\`.

    -g|--github
      Assumes a GitHub repo will be synced. The default repo prefix is
      \`github\`.

      Also assumes that the user has an SSH configured with a host setting named
      \`github\`.

    -u|--aur
      Assumes a repo from Arch Linux's Arch User Repository repo will be synced.
      The default repo prefix is \`aur\`.

    -z|--ado
      Assumes an Azure DevOps will be synced. The default repo prefix is
      \`dev.azure.com\`.

      Also assumes that the user has an SSH configured with a host setting named
      \`azure-devops\`.

      NOTE: this option has not yet been extensively investigated and may not
      work for all ADO repos.


  REPO_SUBTREE_SEGMENTS
     The space-separated collection of subpaths in the repo's URL (excluding the
     Git provider's base href). For a GitHub URL, this is usually a collection
     of 2 strings: the repo's username and the repo name itself. The \`.git\`
     prefix should be excluded from the final argument.

EOF
}

get_src_root() {
  _kernel_name=$(uname -s)

  case $_kernel_name in
    # TODO - confirm that these options aren't total bullshit
    Linux|BSD)
      echo ${_SRC_ROOT_UNIX}

      ;;
    Darwin)
      echo ${_SRC_ROOT_MACOS}

      ;;
    *_NT-*) # Works for MSYS2 and Git Bash
            # TODO - need to investigate other Bash-based Windows envs
      echo ${_SRC_ROOT_WIN}

      ;;
    *)      # Don't leave out illumos et al.
      echo ${_SRC_ROOT_UNIX}

      ;;
  esac
}

_SRC_ROOT=$(get_src_root)
GIT_BIN=$(which git)
# TODO - need to set sane default config dirs for non-Linux OSes
REPO_CONFIG_DIR=${REPO_CONFIG_DIR:-${HOME}/.config/gethub}

# If test mode is specified, then don't clone or update
# Just print the text output to demonstrate the resulting behavior
TEST_MODE=""

make_repo_subtree() {
  local _segments=${@}
  echo ${_segments} | sed 's| |\/|g'
}

# Environment overrides ########################################################

# The directory structure overrides are provided for convenience, but if you
# find yourself using them often, you may as well set new defaults
while getopts :c:hp:r:st o; do
  case "$o" in
    c) # Custom repo config
      . ${REPO_CONFIG_DIR}/${OPTARG}.conf

      ;;
    g) # Custom Git provider
      GIT_PROVIDER_URL="${OPTARG}/"

      ;;
    h) # Heeeeeelp!
      usage

      exit 0
      ;;
    p) # Set (or override) repo prefix
      REPO_PREFIX=${OPTARG}

      ;;
    r) # Override root source dir
      SRC_ROOT=${OPTARG}

      ;;
    s) # Disable SSH for providers that are assumed to use
      NO_SSH="1"

      ;;
    t) # Test mode - prints all messages without running any file I/O executions
      TEST_MODE="1"
      echo "Running in test mode - no syncing will occur"

      ;;
    *)
      # Don't shift away the current option - it is most likely an input for the
      # next loop
      _LOOP_1_OFFSET=2

      break
      ;;
  esac
done

LOOP_1_OFFSET=${_LOOP_1_OFFSET:-1}
shift $(( ${OPTIND} - ${LOOP_1_OFFSET} ))

SRC_ROOT=${SRC_ROOT:-${_SRC_ROOT}}

# Default provider configs #####################################################

case "$1" in
  -a|--arch|--abs) # Arch Linux
    _GIT_PROVIDER_URL="https://git.archlinux.org/"
    _REPO_PREFIX=arch

    shift 1
    ;;
  -b|--bitbucket) # Atlassian Bitbucket
    _GIT_PROVIDER_URL="https://bitbucket.org/"
    _GIT_PROVIDER_SSH="bitbucket:"
    _REPO_PREFIX=bitbucket

    shift 1
    ;;
  -g|--github) # Idk, some no-name up-and-comer...
    _GIT_PROVIDER_URL="https://github.com/"
    _GIT_PROVIDER_SSH="github:"
    _REPO_PREFIX=github

    shift 1
    ;;
  -u|--aur) # Arch Linux User Repository
    _GIT_PROVIDER_URL="https://aur.archlinux.org/"
    _REPO_PREFIX=aur

    shift 1
    ;;
  -z|--ado) # Azure DevOps
    # TODO - need to verify that this is the URL format used for all ADO repos
    _GIT_PROVIDER_URL="https://dev.azure.com/v3/_git/"
    _GIT_PROVIDER_SSH="azure-devops:v3/_git/"
    _REPO_PREFIX="dev.azure.com"

    shift 1
    ;;
esac

if [[ "${NO_SSH+x}" == "x" ]]
then
  unset _GIT_PROVIDER_SSH
fi

echo $_REPO_PREFIX
echo $REPO_PREFIX
REPO_PREFIX=${REPO_PREFIX:-${_REPO_PREFIX}}

# Prefer Git over SSH
# if an SSH host is not set, then prefer the user's provided URL (which may
# actually be an SSH host anyway)
# Finally, fall back to HTTP(s)
GIT_PROVIDER_URL=${_GIT_PROVIDER_SSH:-${GIT_PROVIDER_URL:-${_GIT_PROVIDER_URL}}}

REPO_SUBTREE=$(make_repo_subtree ${@})
GIT_REPO="${GIT_PROVIDER_URL}${REPO_SUBTREE}.git"

if [[ "${REPO_PREFIX:-x}" == "x" ]]
then
  echo "Error: repo prefix not set."
  echo "Must select a predefined repository or specify one via the -r switch."

  exit 2
fi

REPO_DIR=${SRC_ROOT}/${REPO_PREFIX}/${REPO_SUBTREE}

if [[ ! -d ${SRC_ROOT} && ${TEST_MODE:-x} == "x" ]]
then
  echo "Creating root source directory at ${REPO_DIR}..."
  mkdir -p ${SRC_ROOT}
fi

if [[ -d ${REPO_DIR} ]]; then
  echo "Repo directory ${REPO_DIR} already exists on local machine."
  echo "Updating local copy of repository ${GIT_REPO}..."

  # TODO - these nested conditionals can be handled in a function with some
  # finessing of the Git command input
  if [[ ${TEST_MODE:-x} == "x" ]]
  then
    pushd ${REPO_DIR} >/dev/null
    ${GIT_BIN} pull
    popd >/dev/null
  fi
else
  echo "Repo directory ${REPO_DIR} does not exist on local machine."
  echo "Cloning repository ${GIT_REPO}..."

  if [[ ${TEST_MODE:-x} == "x" ]]
  then
    ${GIT_BIN} clone ${GIT_REPO} ${REPO_DIR}
  fi
fi

exit 0

#!/bin/sh

#
# gethub - conveniently clone/update repos in a directory tree
#

# Variables ####################################################################

GIT_BIN=$(which git 2>/dev/null)

if [[ ! $GIT_BIN ]]
then
  echo "Error: unable to locate Git executable."
  echo "Install Git or specify a path to an existing Git binary using the GIT_BIN"
  echo "environment variable."

  exit 1
fi

CONFIG_DIR=${GETHUB_CONFIG_DIR:-"${HOME}/.config/gethub"}
SRC_ROOT=${GETHUB_SRC_ROOT:-"${HOME}/.local/src"}

# If test mode is specified, then don't clone or update
# Just print the text output to demonstrate the resulting behavior
TEST_MODE=""

# Functions ####################################################################

usage() {
  cat <<EOF

  ${0##*/} - A Convenient Git Repository Syncing Tool

  Usage:
    ${0##*/} [ CONFIG_OPTIONS | PROVIDER_OPT ] REPO_TREE


  CONFIG_OPTIONS

  -c GIT_PROVIDER_CONFIG
    Use an alternate repo config to configure the repo sync settings. In
    the current implementation, .conf files are simple and contain at most two
    variables: GIT_PROVIDER_URL and REPO_PREFIX (both explained below).

    .conf files are assumed to live in the repo config directory (which can be
    overridden by passing the variable CONFIG_DIR into the script). On all
    systems, this currently defaults to \${HOME}/.config.

    This option assumes that the file suffix is not passed as part of the
    argument. When using the default config directory for Linux, passing
    \`-c foo\` sources \${HOME}/.config/gethub/foo.conf.

  -g GIT_PROVIDER_URL
    Configure the Git provider URL if not sourcing a repo config.
    (It's probably just easier to create a repo config file, but this option is
    included for convenience/testing/accommodating your masochism).

  -p REPO_PREFIX
    Set an alternate prefix directory for the repo to be synced. By default, the
    repo prefix is the directory is the directory into which all repos for a
    specific Git provider are grouped. (E.g., the default prefix for GitHub
    repos, is \`github\`).

    This is useful in case you have a use case that, for whatever reason,
    necessitates having access to an alternate copy of a Git repo.
    Passing \`-r github-2\` will create the repo tree under
    \${SRC_ROOT}/github-2.

  -r SRC_ROOT
    Set an alternate source root directory for the repo to be synced. The source
    root is the top several segments of the path under which all repos synced
    with \`${0##*/}\`, are synced. The default varies by OS, but as an example,
    the source root defaults to ${HOME}/.local/src on Linux.

    This is available in case you're running \`${0##*/}\` in an environment
    where you don't have permission to change the default source root, or your
    OS is incorrectly detected (e.g., because you're running an obscure Unix or
    don't have \`uname\` installed).

  -t
    Run \`${0##*/}\` in test mode. In this mode, all messages logged in the
    default run mode are shown for debugging purposes, but no syncing occurs.


  PROVIDER_OPT

    \`${0##*/}\` ships with a few major Git providers preconfigured as shell
    options. When passing these options, the only other required parameters are
    the URL path segments not included in the root provider URL (see REPO_TREE).

    Passing a default provider option also sets a default repo prefix. To
    override the repo prefix or even the root provider URL (e.g., to substitute
    in an SSH host definition), you can create a .conf file with the same name
    as the provider's default prefix.

    If you want to override GitHub's root URL, create
    \${HOME}/.config/github.conf with a populated GIT_PROVIDER_URL. (If you
    don't want to override its repo prefix, simply don't set a REPO_PREFIX in
    the file.) To clone or pull a GitHub repo, invoke the script normally,
    passing the \`-g\` flag; you don't need to pass the \`-c\` flag. Your
    overrides file will be picked up and applied with your overrides configured.

    -a|--arch|--abs
      Assumes an Arch Linx official svntogit PKGBUILD directory will be synced
      via Git. The default repo prefix is \`arch\`.

      NOTE: This option is very likely broken at the moment, as Arch Linux has
      recently migrated all build scripts to GitHub. Use Arch's \`asp\` package
      as a workaround for the meantime if this option fails for you. (Using
      \`-g\` will probably not work, given the architecture of the svntogit
      repo.)

    -b|--bitbucket
      Assumes a Bitbucket repo will be synced. The default repo prefix is
      \`bitbucket\`.

    -g|--github
      Assumes a GitHub repo will be synced. The default repo prefix is
      \`github\`.

    -u|--aur
      Assumes a repo from Arch Linux's Arch User Repository repo will be synced.
      The default repo prefix is \`aur\`.


  REPO_TREE
     The space-separated collection of subpaths in the repo's URL (excluding the
     Git provider's base href). For a GitHub URL, this is usually a collection
     of 2 strings: the repo's username and the repo name itself. The \`.git\`
     prefix should be excluded from the final argument.

EOF
}

try_source() {
  local _filename=${1}

  if [[ -f ${_filename} ]]
  then
    . ${_filename}
  fi
}

make_repo_subtree() {
  local _segments=${@}
  echo ${_segments} | sed 's| |\/|g'
}

# Environment overrides ########################################################

# The directory structure overrides are provided for convenience, but if you
# find yourself using them often, you may as well set new defaults
while getopts :c:hp:r:tv: o; do
  case "$o" in
    c) # Custom repo config
      PROVIDER_CONFIG=${OPTARG}

      ;;
    h) # Heeeeeelp!
      usage

      exit 0
      ;;
    p) # Set (or override) repo prefix
      REPO_PREFIX=${OPTARG}

      ;;
    r) # Override root source dir
      SRC_ROOT=${OPTARG}

      ;;
    t) # Test mode - prints all messages without running any file I/O executions
      TEST_MODE="1"
      echo "Running in test mode - no syncing will occur"

      ;;
    v) # Custom Git provider
      GIT_PROVIDER_URL="${OPTARG}/"

      ;;
    *)
      # Don't shift away the current option - it is most likely an input for the
      # next loop
      _LOOP_1_OFFSET=2

      break
      ;;
  esac
done

LOOP_1_OFFSET=${_LOOP_1_OFFSET:-1}
shift $(( ${OPTIND} - ${LOOP_1_OFFSET} ))


# Default provider configs #####################################################

case "$1" in
  -a|--arch|--abs) # Arch Linux
    _GIT_PROVIDER_URL="https://git.archlinux.org/"
    _REPO_PREFIX=arch
    PROVIDER_CONFIG=arch

    shift 1
    ;;
  -b|--bitbucket) # Atlassian Bitbucket
    _GIT_PROVIDER_URL="https://bitbucket.org/"
    _REPO_PREFIX=bitbucket
    PROVIDER_CONFIG=bitbucket

    shift 1
    ;;
  -g|--github) # Idk, some no-name up-and-comer...
    _GIT_PROVIDER_URL="https://github.com/"
    _REPO_PREFIX=github
    PROVIDER_CONFIG=github

    shift 1
    ;;
  -u|--aur) # Arch Linux User Repository
    _GIT_PROVIDER_URL="https://aur.archlinux.org/"
    _REPO_PREFIX=aur
    PROVIDER_CONFIG=aur

    shift 1
    ;;
esac

# If the user has set a custom config, or sync default overrides
# (e.g., has configured SSH for GitHub), pull those settings in
if [[ "${PROVIDER_CONFIG:+x}" == "x" ]]
then
  try_source ${CONFIG_DIR}/${PROVIDER_CONFIG}
fi

REPO_PREFIX=${REPO_PREFIX-${_REPO_PREFIX}}
GIT_PROVIDER_URL=${GIT_PROVIDER_URL-${_GIT_PROVIDER_URL}}

REPO_SUBTREE=$(make_repo_subtree ${@})

REPO_SUFFIX=".git"

if [[ ${NO_REPO_SUFFIX+x} == "x" ]]
then
  REPO_SUFFIX=""
fi

GIT_REPO="${GIT_PROVIDER_URL}${REPO_SUBTREE}${REPO_SUFFIX}"

if [[ "${REPO_PREFIX:-x}" == "x" ]]
then
  echo "Error: repo prefix not set."
  echo "Must select a predefined repository or specify one via the -r switch."

  exit 2
fi

REPO_DIR=${SRC_ROOT}/${REPO_PREFIX}/${REPO_SUBTREE}

if [[ ! -d ${SRC_ROOT} && ${TEST_MODE:-x} == "x" ]]
then
  echo "Creating root source directory at ${REPO_DIR}..."
  mkdir -p ${SRC_ROOT}
fi

if [[ -d ${REPO_DIR} ]]; then
  echo "Repo directory ${REPO_DIR} already exists on local machine."
  echo "Updating local copy of repository ${GIT_REPO}..."

  # TODO - these nested conditionals can be handled in a function with some
  # finessing of the Git command input
  if [[ ${TEST_MODE:-x} == "x" ]]
  then
    pushd ${REPO_DIR} >/dev/null
    ${GIT_BIN} pull
    popd >/dev/null
  fi
else
  echo "Repo directory ${REPO_DIR} does not exist on local machine."
  echo "Cloning repository ${GIT_REPO}..."

  if [[ ${TEST_MODE:-x} == "x" ]]
  then
    ${GIT_BIN} clone ${GIT_REPO} ${REPO_DIR}
  fi
fi

exit 0
